// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: weatherSchema.proto

package org.example.protobuf;

public final class WeatherShemaOuterClass {
  private WeatherShemaOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface WeatherShemaOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.example.protobuf.WeatherShema)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>double latitude = 1;</code>
     * @return The latitude.
     */
    double getLatitude();

    /**
     * <code>double longitude = 2;</code>
     * @return The longitude.
     */
    double getLongitude();

    /**
     * <code>string timezone = 3;</code>
     * @return The timezone.
     */
    java.lang.String getTimezone();
    /**
     * <code>string timezone = 3;</code>
     * @return The bytes for timezone.
     */
    com.google.protobuf.ByteString
        getTimezoneBytes();

    /**
     * <code>string zipCode = 4;</code>
     * @return The zipCode.
     */
    java.lang.String getZipCode();
    /**
     * <code>string zipCode = 4;</code>
     * @return The bytes for zipCode.
     */
    com.google.protobuf.ByteString
        getZipCodeBytes();

    /**
     * <code>string region = 5;</code>
     * @return The region.
     */
    java.lang.String getRegion();
    /**
     * <code>string region = 5;</code>
     * @return The bytes for region.
     */
    com.google.protobuf.ByteString
        getRegionBytes();

    /**
     * <code>repeated string time = 6;</code>
     * @return A list containing the time.
     */
    java.util.List<java.lang.String>
        getTimeList();
    /**
     * <code>repeated string time = 6;</code>
     * @return The count of time.
     */
    int getTimeCount();
    /**
     * <code>repeated string time = 6;</code>
     * @param index The index of the element to return.
     * @return The time at the given index.
     */
    java.lang.String getTime(int index);
    /**
     * <code>repeated string time = 6;</code>
     * @param index The index of the value to return.
     * @return The bytes of the time at the given index.
     */
    com.google.protobuf.ByteString
        getTimeBytes(int index);

    /**
     * <code>repeated double temperature = 7;</code>
     * @return A list containing the temperature.
     */
    java.util.List<java.lang.Double> getTemperatureList();
    /**
     * <code>repeated double temperature = 7;</code>
     * @return The count of temperature.
     */
    int getTemperatureCount();
    /**
     * <code>repeated double temperature = 7;</code>
     * @param index The index of the element to return.
     * @return The temperature at the given index.
     */
    double getTemperature(int index);

    /**
     * <code>repeated int32 relativeHumidity = 8;</code>
     * @return A list containing the relativeHumidity.
     */
    java.util.List<java.lang.Integer> getRelativeHumidityList();
    /**
     * <code>repeated int32 relativeHumidity = 8;</code>
     * @return The count of relativeHumidity.
     */
    int getRelativeHumidityCount();
    /**
     * <code>repeated int32 relativeHumidity = 8;</code>
     * @param index The index of the element to return.
     * @return The relativeHumidity at the given index.
     */
    int getRelativeHumidity(int index);

    /**
     * <code>repeated int32 precipitationProbability = 9;</code>
     * @return A list containing the precipitationProbability.
     */
    java.util.List<java.lang.Integer> getPrecipitationProbabilityList();
    /**
     * <code>repeated int32 precipitationProbability = 9;</code>
     * @return The count of precipitationProbability.
     */
    int getPrecipitationProbabilityCount();
    /**
     * <code>repeated int32 precipitationProbability = 9;</code>
     * @param index The index of the element to return.
     * @return The precipitationProbability at the given index.
     */
    int getPrecipitationProbability(int index);

    /**
     * <code>repeated double precipitation = 10;</code>
     * @return A list containing the precipitation.
     */
    java.util.List<java.lang.Double> getPrecipitationList();
    /**
     * <code>repeated double precipitation = 10;</code>
     * @return The count of precipitation.
     */
    int getPrecipitationCount();
    /**
     * <code>repeated double precipitation = 10;</code>
     * @param index The index of the element to return.
     * @return The precipitation at the given index.
     */
    double getPrecipitation(int index);

    /**
     * <code>repeated double rain = 11;</code>
     * @return A list containing the rain.
     */
    java.util.List<java.lang.Double> getRainList();
    /**
     * <code>repeated double rain = 11;</code>
     * @return The count of rain.
     */
    int getRainCount();
    /**
     * <code>repeated double rain = 11;</code>
     * @param index The index of the element to return.
     * @return The rain at the given index.
     */
    double getRain(int index);

    /**
     * <code>repeated double surfacePressure = 12;</code>
     * @return A list containing the surfacePressure.
     */
    java.util.List<java.lang.Double> getSurfacePressureList();
    /**
     * <code>repeated double surfacePressure = 12;</code>
     * @return The count of surfacePressure.
     */
    int getSurfacePressureCount();
    /**
     * <code>repeated double surfacePressure = 12;</code>
     * @param index The index of the element to return.
     * @return The surfacePressure at the given index.
     */
    double getSurfacePressure(int index);

    /**
     * <code>repeated double windSpeed = 13;</code>
     * @return A list containing the windSpeed.
     */
    java.util.List<java.lang.Double> getWindSpeedList();
    /**
     * <code>repeated double windSpeed = 13;</code>
     * @return The count of windSpeed.
     */
    int getWindSpeedCount();
    /**
     * <code>repeated double windSpeed = 13;</code>
     * @param index The index of the element to return.
     * @return The windSpeed at the given index.
     */
    double getWindSpeed(int index);

    /**
     * <code>repeated int32 windDirection = 14;</code>
     * @return A list containing the windDirection.
     */
    java.util.List<java.lang.Integer> getWindDirectionList();
    /**
     * <code>repeated int32 windDirection = 14;</code>
     * @return The count of windDirection.
     */
    int getWindDirectionCount();
    /**
     * <code>repeated int32 windDirection = 14;</code>
     * @param index The index of the element to return.
     * @return The windDirection at the given index.
     */
    int getWindDirection(int index);
  }
  /**
   * Protobuf type {@code org.example.protobuf.WeatherShema}
   */
  public static final class WeatherShema extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.example.protobuf.WeatherShema)
      WeatherShemaOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use WeatherShema.newBuilder() to construct.
    private WeatherShema(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private WeatherShema() {
      timezone_ = "";
      zipCode_ = "";
      region_ = "";
      time_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      temperature_ = emptyDoubleList();
      relativeHumidity_ = emptyIntList();
      precipitationProbability_ = emptyIntList();
      precipitation_ = emptyDoubleList();
      rain_ = emptyDoubleList();
      surfacePressure_ = emptyDoubleList();
      windSpeed_ = emptyDoubleList();
      windDirection_ = emptyIntList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new WeatherShema();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.example.protobuf.WeatherShemaOuterClass.internal_static_org_example_protobuf_WeatherShema_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.example.protobuf.WeatherShemaOuterClass.internal_static_org_example_protobuf_WeatherShema_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.example.protobuf.WeatherShemaOuterClass.WeatherShema.class, org.example.protobuf.WeatherShemaOuterClass.WeatherShema.Builder.class);
    }

    public static final int LATITUDE_FIELD_NUMBER = 1;
    private double latitude_;
    /**
     * <code>double latitude = 1;</code>
     * @return The latitude.
     */
    @java.lang.Override
    public double getLatitude() {
      return latitude_;
    }

    public static final int LONGITUDE_FIELD_NUMBER = 2;
    private double longitude_;
    /**
     * <code>double longitude = 2;</code>
     * @return The longitude.
     */
    @java.lang.Override
    public double getLongitude() {
      return longitude_;
    }

    public static final int TIMEZONE_FIELD_NUMBER = 3;
    private volatile java.lang.Object timezone_;
    /**
     * <code>string timezone = 3;</code>
     * @return The timezone.
     */
    @java.lang.Override
    public java.lang.String getTimezone() {
      java.lang.Object ref = timezone_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        timezone_ = s;
        return s;
      }
    }
    /**
     * <code>string timezone = 3;</code>
     * @return The bytes for timezone.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTimezoneBytes() {
      java.lang.Object ref = timezone_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        timezone_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ZIPCODE_FIELD_NUMBER = 4;
    private volatile java.lang.Object zipCode_;
    /**
     * <code>string zipCode = 4;</code>
     * @return The zipCode.
     */
    @java.lang.Override
    public java.lang.String getZipCode() {
      java.lang.Object ref = zipCode_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        zipCode_ = s;
        return s;
      }
    }
    /**
     * <code>string zipCode = 4;</code>
     * @return The bytes for zipCode.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getZipCodeBytes() {
      java.lang.Object ref = zipCode_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        zipCode_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int REGION_FIELD_NUMBER = 5;
    private volatile java.lang.Object region_;
    /**
     * <code>string region = 5;</code>
     * @return The region.
     */
    @java.lang.Override
    public java.lang.String getRegion() {
      java.lang.Object ref = region_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        region_ = s;
        return s;
      }
    }
    /**
     * <code>string region = 5;</code>
     * @return The bytes for region.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getRegionBytes() {
      java.lang.Object ref = region_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        region_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TIME_FIELD_NUMBER = 6;
    private com.google.protobuf.LazyStringList time_;
    /**
     * <code>repeated string time = 6;</code>
     * @return A list containing the time.
     */
    public com.google.protobuf.ProtocolStringList
        getTimeList() {
      return time_;
    }
    /**
     * <code>repeated string time = 6;</code>
     * @return The count of time.
     */
    public int getTimeCount() {
      return time_.size();
    }
    /**
     * <code>repeated string time = 6;</code>
     * @param index The index of the element to return.
     * @return The time at the given index.
     */
    public java.lang.String getTime(int index) {
      return time_.get(index);
    }
    /**
     * <code>repeated string time = 6;</code>
     * @param index The index of the value to return.
     * @return The bytes of the time at the given index.
     */
    public com.google.protobuf.ByteString
        getTimeBytes(int index) {
      return time_.getByteString(index);
    }

    public static final int TEMPERATURE_FIELD_NUMBER = 7;
    private com.google.protobuf.Internal.DoubleList temperature_;
    /**
     * <code>repeated double temperature = 7;</code>
     * @return A list containing the temperature.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getTemperatureList() {
      return temperature_;
    }
    /**
     * <code>repeated double temperature = 7;</code>
     * @return The count of temperature.
     */
    public int getTemperatureCount() {
      return temperature_.size();
    }
    /**
     * <code>repeated double temperature = 7;</code>
     * @param index The index of the element to return.
     * @return The temperature at the given index.
     */
    public double getTemperature(int index) {
      return temperature_.getDouble(index);
    }
    private int temperatureMemoizedSerializedSize = -1;

    public static final int RELATIVEHUMIDITY_FIELD_NUMBER = 8;
    private com.google.protobuf.Internal.IntList relativeHumidity_;
    /**
     * <code>repeated int32 relativeHumidity = 8;</code>
     * @return A list containing the relativeHumidity.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getRelativeHumidityList() {
      return relativeHumidity_;
    }
    /**
     * <code>repeated int32 relativeHumidity = 8;</code>
     * @return The count of relativeHumidity.
     */
    public int getRelativeHumidityCount() {
      return relativeHumidity_.size();
    }
    /**
     * <code>repeated int32 relativeHumidity = 8;</code>
     * @param index The index of the element to return.
     * @return The relativeHumidity at the given index.
     */
    public int getRelativeHumidity(int index) {
      return relativeHumidity_.getInt(index);
    }
    private int relativeHumidityMemoizedSerializedSize = -1;

    public static final int PRECIPITATIONPROBABILITY_FIELD_NUMBER = 9;
    private com.google.protobuf.Internal.IntList precipitationProbability_;
    /**
     * <code>repeated int32 precipitationProbability = 9;</code>
     * @return A list containing the precipitationProbability.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getPrecipitationProbabilityList() {
      return precipitationProbability_;
    }
    /**
     * <code>repeated int32 precipitationProbability = 9;</code>
     * @return The count of precipitationProbability.
     */
    public int getPrecipitationProbabilityCount() {
      return precipitationProbability_.size();
    }
    /**
     * <code>repeated int32 precipitationProbability = 9;</code>
     * @param index The index of the element to return.
     * @return The precipitationProbability at the given index.
     */
    public int getPrecipitationProbability(int index) {
      return precipitationProbability_.getInt(index);
    }
    private int precipitationProbabilityMemoizedSerializedSize = -1;

    public static final int PRECIPITATION_FIELD_NUMBER = 10;
    private com.google.protobuf.Internal.DoubleList precipitation_;
    /**
     * <code>repeated double precipitation = 10;</code>
     * @return A list containing the precipitation.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getPrecipitationList() {
      return precipitation_;
    }
    /**
     * <code>repeated double precipitation = 10;</code>
     * @return The count of precipitation.
     */
    public int getPrecipitationCount() {
      return precipitation_.size();
    }
    /**
     * <code>repeated double precipitation = 10;</code>
     * @param index The index of the element to return.
     * @return The precipitation at the given index.
     */
    public double getPrecipitation(int index) {
      return precipitation_.getDouble(index);
    }
    private int precipitationMemoizedSerializedSize = -1;

    public static final int RAIN_FIELD_NUMBER = 11;
    private com.google.protobuf.Internal.DoubleList rain_;
    /**
     * <code>repeated double rain = 11;</code>
     * @return A list containing the rain.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getRainList() {
      return rain_;
    }
    /**
     * <code>repeated double rain = 11;</code>
     * @return The count of rain.
     */
    public int getRainCount() {
      return rain_.size();
    }
    /**
     * <code>repeated double rain = 11;</code>
     * @param index The index of the element to return.
     * @return The rain at the given index.
     */
    public double getRain(int index) {
      return rain_.getDouble(index);
    }
    private int rainMemoizedSerializedSize = -1;

    public static final int SURFACEPRESSURE_FIELD_NUMBER = 12;
    private com.google.protobuf.Internal.DoubleList surfacePressure_;
    /**
     * <code>repeated double surfacePressure = 12;</code>
     * @return A list containing the surfacePressure.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getSurfacePressureList() {
      return surfacePressure_;
    }
    /**
     * <code>repeated double surfacePressure = 12;</code>
     * @return The count of surfacePressure.
     */
    public int getSurfacePressureCount() {
      return surfacePressure_.size();
    }
    /**
     * <code>repeated double surfacePressure = 12;</code>
     * @param index The index of the element to return.
     * @return The surfacePressure at the given index.
     */
    public double getSurfacePressure(int index) {
      return surfacePressure_.getDouble(index);
    }
    private int surfacePressureMemoizedSerializedSize = -1;

    public static final int WINDSPEED_FIELD_NUMBER = 13;
    private com.google.protobuf.Internal.DoubleList windSpeed_;
    /**
     * <code>repeated double windSpeed = 13;</code>
     * @return A list containing the windSpeed.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getWindSpeedList() {
      return windSpeed_;
    }
    /**
     * <code>repeated double windSpeed = 13;</code>
     * @return The count of windSpeed.
     */
    public int getWindSpeedCount() {
      return windSpeed_.size();
    }
    /**
     * <code>repeated double windSpeed = 13;</code>
     * @param index The index of the element to return.
     * @return The windSpeed at the given index.
     */
    public double getWindSpeed(int index) {
      return windSpeed_.getDouble(index);
    }
    private int windSpeedMemoizedSerializedSize = -1;

    public static final int WINDDIRECTION_FIELD_NUMBER = 14;
    private com.google.protobuf.Internal.IntList windDirection_;
    /**
     * <code>repeated int32 windDirection = 14;</code>
     * @return A list containing the windDirection.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getWindDirectionList() {
      return windDirection_;
    }
    /**
     * <code>repeated int32 windDirection = 14;</code>
     * @return The count of windDirection.
     */
    public int getWindDirectionCount() {
      return windDirection_.size();
    }
    /**
     * <code>repeated int32 windDirection = 14;</code>
     * @param index The index of the element to return.
     * @return The windDirection at the given index.
     */
    public int getWindDirection(int index) {
      return windDirection_.getInt(index);
    }
    private int windDirectionMemoizedSerializedSize = -1;

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (java.lang.Double.doubleToRawLongBits(latitude_) != 0) {
        output.writeDouble(1, latitude_);
      }
      if (java.lang.Double.doubleToRawLongBits(longitude_) != 0) {
        output.writeDouble(2, longitude_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(timezone_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, timezone_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(zipCode_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, zipCode_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(region_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 5, region_);
      }
      for (int i = 0; i < time_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 6, time_.getRaw(i));
      }
      if (getTemperatureList().size() > 0) {
        output.writeUInt32NoTag(58);
        output.writeUInt32NoTag(temperatureMemoizedSerializedSize);
      }
      for (int i = 0; i < temperature_.size(); i++) {
        output.writeDoubleNoTag(temperature_.getDouble(i));
      }
      if (getRelativeHumidityList().size() > 0) {
        output.writeUInt32NoTag(66);
        output.writeUInt32NoTag(relativeHumidityMemoizedSerializedSize);
      }
      for (int i = 0; i < relativeHumidity_.size(); i++) {
        output.writeInt32NoTag(relativeHumidity_.getInt(i));
      }
      if (getPrecipitationProbabilityList().size() > 0) {
        output.writeUInt32NoTag(74);
        output.writeUInt32NoTag(precipitationProbabilityMemoizedSerializedSize);
      }
      for (int i = 0; i < precipitationProbability_.size(); i++) {
        output.writeInt32NoTag(precipitationProbability_.getInt(i));
      }
      if (getPrecipitationList().size() > 0) {
        output.writeUInt32NoTag(82);
        output.writeUInt32NoTag(precipitationMemoizedSerializedSize);
      }
      for (int i = 0; i < precipitation_.size(); i++) {
        output.writeDoubleNoTag(precipitation_.getDouble(i));
      }
      if (getRainList().size() > 0) {
        output.writeUInt32NoTag(90);
        output.writeUInt32NoTag(rainMemoizedSerializedSize);
      }
      for (int i = 0; i < rain_.size(); i++) {
        output.writeDoubleNoTag(rain_.getDouble(i));
      }
      if (getSurfacePressureList().size() > 0) {
        output.writeUInt32NoTag(98);
        output.writeUInt32NoTag(surfacePressureMemoizedSerializedSize);
      }
      for (int i = 0; i < surfacePressure_.size(); i++) {
        output.writeDoubleNoTag(surfacePressure_.getDouble(i));
      }
      if (getWindSpeedList().size() > 0) {
        output.writeUInt32NoTag(106);
        output.writeUInt32NoTag(windSpeedMemoizedSerializedSize);
      }
      for (int i = 0; i < windSpeed_.size(); i++) {
        output.writeDoubleNoTag(windSpeed_.getDouble(i));
      }
      if (getWindDirectionList().size() > 0) {
        output.writeUInt32NoTag(114);
        output.writeUInt32NoTag(windDirectionMemoizedSerializedSize);
      }
      for (int i = 0; i < windDirection_.size(); i++) {
        output.writeInt32NoTag(windDirection_.getInt(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (java.lang.Double.doubleToRawLongBits(latitude_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(1, latitude_);
      }
      if (java.lang.Double.doubleToRawLongBits(longitude_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, longitude_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(timezone_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, timezone_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(zipCode_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, zipCode_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(region_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, region_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < time_.size(); i++) {
          dataSize += computeStringSizeNoTag(time_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getTimeList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getTemperatureList().size();
        size += dataSize;
        if (!getTemperatureList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        temperatureMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < relativeHumidity_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(relativeHumidity_.getInt(i));
        }
        size += dataSize;
        if (!getRelativeHumidityList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        relativeHumidityMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < precipitationProbability_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(precipitationProbability_.getInt(i));
        }
        size += dataSize;
        if (!getPrecipitationProbabilityList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        precipitationProbabilityMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 8 * getPrecipitationList().size();
        size += dataSize;
        if (!getPrecipitationList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        precipitationMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 8 * getRainList().size();
        size += dataSize;
        if (!getRainList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        rainMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 8 * getSurfacePressureList().size();
        size += dataSize;
        if (!getSurfacePressureList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        surfacePressureMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 8 * getWindSpeedList().size();
        size += dataSize;
        if (!getWindSpeedList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        windSpeedMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < windDirection_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(windDirection_.getInt(i));
        }
        size += dataSize;
        if (!getWindDirectionList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        windDirectionMemoizedSerializedSize = dataSize;
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.example.protobuf.WeatherShemaOuterClass.WeatherShema)) {
        return super.equals(obj);
      }
      org.example.protobuf.WeatherShemaOuterClass.WeatherShema other = (org.example.protobuf.WeatherShemaOuterClass.WeatherShema) obj;

      if (java.lang.Double.doubleToLongBits(getLatitude())
          != java.lang.Double.doubleToLongBits(
              other.getLatitude())) return false;
      if (java.lang.Double.doubleToLongBits(getLongitude())
          != java.lang.Double.doubleToLongBits(
              other.getLongitude())) return false;
      if (!getTimezone()
          .equals(other.getTimezone())) return false;
      if (!getZipCode()
          .equals(other.getZipCode())) return false;
      if (!getRegion()
          .equals(other.getRegion())) return false;
      if (!getTimeList()
          .equals(other.getTimeList())) return false;
      if (!getTemperatureList()
          .equals(other.getTemperatureList())) return false;
      if (!getRelativeHumidityList()
          .equals(other.getRelativeHumidityList())) return false;
      if (!getPrecipitationProbabilityList()
          .equals(other.getPrecipitationProbabilityList())) return false;
      if (!getPrecipitationList()
          .equals(other.getPrecipitationList())) return false;
      if (!getRainList()
          .equals(other.getRainList())) return false;
      if (!getSurfacePressureList()
          .equals(other.getSurfacePressureList())) return false;
      if (!getWindSpeedList()
          .equals(other.getWindSpeedList())) return false;
      if (!getWindDirectionList()
          .equals(other.getWindDirectionList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + LATITUDE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getLatitude()));
      hash = (37 * hash) + LONGITUDE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getLongitude()));
      hash = (37 * hash) + TIMEZONE_FIELD_NUMBER;
      hash = (53 * hash) + getTimezone().hashCode();
      hash = (37 * hash) + ZIPCODE_FIELD_NUMBER;
      hash = (53 * hash) + getZipCode().hashCode();
      hash = (37 * hash) + REGION_FIELD_NUMBER;
      hash = (53 * hash) + getRegion().hashCode();
      if (getTimeCount() > 0) {
        hash = (37 * hash) + TIME_FIELD_NUMBER;
        hash = (53 * hash) + getTimeList().hashCode();
      }
      if (getTemperatureCount() > 0) {
        hash = (37 * hash) + TEMPERATURE_FIELD_NUMBER;
        hash = (53 * hash) + getTemperatureList().hashCode();
      }
      if (getRelativeHumidityCount() > 0) {
        hash = (37 * hash) + RELATIVEHUMIDITY_FIELD_NUMBER;
        hash = (53 * hash) + getRelativeHumidityList().hashCode();
      }
      if (getPrecipitationProbabilityCount() > 0) {
        hash = (37 * hash) + PRECIPITATIONPROBABILITY_FIELD_NUMBER;
        hash = (53 * hash) + getPrecipitationProbabilityList().hashCode();
      }
      if (getPrecipitationCount() > 0) {
        hash = (37 * hash) + PRECIPITATION_FIELD_NUMBER;
        hash = (53 * hash) + getPrecipitationList().hashCode();
      }
      if (getRainCount() > 0) {
        hash = (37 * hash) + RAIN_FIELD_NUMBER;
        hash = (53 * hash) + getRainList().hashCode();
      }
      if (getSurfacePressureCount() > 0) {
        hash = (37 * hash) + SURFACEPRESSURE_FIELD_NUMBER;
        hash = (53 * hash) + getSurfacePressureList().hashCode();
      }
      if (getWindSpeedCount() > 0) {
        hash = (37 * hash) + WINDSPEED_FIELD_NUMBER;
        hash = (53 * hash) + getWindSpeedList().hashCode();
      }
      if (getWindDirectionCount() > 0) {
        hash = (37 * hash) + WINDDIRECTION_FIELD_NUMBER;
        hash = (53 * hash) + getWindDirectionList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.example.protobuf.WeatherShemaOuterClass.WeatherShema parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.example.protobuf.WeatherShemaOuterClass.WeatherShema parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.example.protobuf.WeatherShemaOuterClass.WeatherShema parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.example.protobuf.WeatherShemaOuterClass.WeatherShema parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.example.protobuf.WeatherShemaOuterClass.WeatherShema parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.example.protobuf.WeatherShemaOuterClass.WeatherShema parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.example.protobuf.WeatherShemaOuterClass.WeatherShema parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.example.protobuf.WeatherShemaOuterClass.WeatherShema parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.example.protobuf.WeatherShemaOuterClass.WeatherShema parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.example.protobuf.WeatherShemaOuterClass.WeatherShema parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.example.protobuf.WeatherShemaOuterClass.WeatherShema parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.example.protobuf.WeatherShemaOuterClass.WeatherShema parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.example.protobuf.WeatherShemaOuterClass.WeatherShema prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.example.protobuf.WeatherShema}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.example.protobuf.WeatherShema)
        org.example.protobuf.WeatherShemaOuterClass.WeatherShemaOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.example.protobuf.WeatherShemaOuterClass.internal_static_org_example_protobuf_WeatherShema_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.example.protobuf.WeatherShemaOuterClass.internal_static_org_example_protobuf_WeatherShema_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.example.protobuf.WeatherShemaOuterClass.WeatherShema.class, org.example.protobuf.WeatherShemaOuterClass.WeatherShema.Builder.class);
      }

      // Construct using org.example.protobuf.WeatherShemaOuterClass.WeatherShema.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        latitude_ = 0D;

        longitude_ = 0D;

        timezone_ = "";

        zipCode_ = "";

        region_ = "";

        time_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        temperature_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000002);
        relativeHumidity_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000004);
        precipitationProbability_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000008);
        precipitation_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000010);
        rain_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000020);
        surfacePressure_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000040);
        windSpeed_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000080);
        windDirection_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.example.protobuf.WeatherShemaOuterClass.internal_static_org_example_protobuf_WeatherShema_descriptor;
      }

      @java.lang.Override
      public org.example.protobuf.WeatherShemaOuterClass.WeatherShema getDefaultInstanceForType() {
        return org.example.protobuf.WeatherShemaOuterClass.WeatherShema.getDefaultInstance();
      }

      @java.lang.Override
      public org.example.protobuf.WeatherShemaOuterClass.WeatherShema build() {
        org.example.protobuf.WeatherShemaOuterClass.WeatherShema result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.example.protobuf.WeatherShemaOuterClass.WeatherShema buildPartial() {
        org.example.protobuf.WeatherShemaOuterClass.WeatherShema result = new org.example.protobuf.WeatherShemaOuterClass.WeatherShema(this);
        int from_bitField0_ = bitField0_;
        result.latitude_ = latitude_;
        result.longitude_ = longitude_;
        result.timezone_ = timezone_;
        result.zipCode_ = zipCode_;
        result.region_ = region_;
        if (((bitField0_ & 0x00000001) != 0)) {
          time_ = time_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.time_ = time_;
        if (((bitField0_ & 0x00000002) != 0)) {
          temperature_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.temperature_ = temperature_;
        if (((bitField0_ & 0x00000004) != 0)) {
          relativeHumidity_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.relativeHumidity_ = relativeHumidity_;
        if (((bitField0_ & 0x00000008) != 0)) {
          precipitationProbability_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.precipitationProbability_ = precipitationProbability_;
        if (((bitField0_ & 0x00000010) != 0)) {
          precipitation_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.precipitation_ = precipitation_;
        if (((bitField0_ & 0x00000020) != 0)) {
          rain_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.rain_ = rain_;
        if (((bitField0_ & 0x00000040) != 0)) {
          surfacePressure_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.surfacePressure_ = surfacePressure_;
        if (((bitField0_ & 0x00000080) != 0)) {
          windSpeed_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.windSpeed_ = windSpeed_;
        if (((bitField0_ & 0x00000100) != 0)) {
          windDirection_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000100);
        }
        result.windDirection_ = windDirection_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.example.protobuf.WeatherShemaOuterClass.WeatherShema) {
          return mergeFrom((org.example.protobuf.WeatherShemaOuterClass.WeatherShema)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.example.protobuf.WeatherShemaOuterClass.WeatherShema other) {
        if (other == org.example.protobuf.WeatherShemaOuterClass.WeatherShema.getDefaultInstance()) return this;
        if (other.getLatitude() != 0D) {
          setLatitude(other.getLatitude());
        }
        if (other.getLongitude() != 0D) {
          setLongitude(other.getLongitude());
        }
        if (!other.getTimezone().isEmpty()) {
          timezone_ = other.timezone_;
          onChanged();
        }
        if (!other.getZipCode().isEmpty()) {
          zipCode_ = other.zipCode_;
          onChanged();
        }
        if (!other.getRegion().isEmpty()) {
          region_ = other.region_;
          onChanged();
        }
        if (!other.time_.isEmpty()) {
          if (time_.isEmpty()) {
            time_ = other.time_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureTimeIsMutable();
            time_.addAll(other.time_);
          }
          onChanged();
        }
        if (!other.temperature_.isEmpty()) {
          if (temperature_.isEmpty()) {
            temperature_ = other.temperature_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureTemperatureIsMutable();
            temperature_.addAll(other.temperature_);
          }
          onChanged();
        }
        if (!other.relativeHumidity_.isEmpty()) {
          if (relativeHumidity_.isEmpty()) {
            relativeHumidity_ = other.relativeHumidity_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureRelativeHumidityIsMutable();
            relativeHumidity_.addAll(other.relativeHumidity_);
          }
          onChanged();
        }
        if (!other.precipitationProbability_.isEmpty()) {
          if (precipitationProbability_.isEmpty()) {
            precipitationProbability_ = other.precipitationProbability_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensurePrecipitationProbabilityIsMutable();
            precipitationProbability_.addAll(other.precipitationProbability_);
          }
          onChanged();
        }
        if (!other.precipitation_.isEmpty()) {
          if (precipitation_.isEmpty()) {
            precipitation_ = other.precipitation_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensurePrecipitationIsMutable();
            precipitation_.addAll(other.precipitation_);
          }
          onChanged();
        }
        if (!other.rain_.isEmpty()) {
          if (rain_.isEmpty()) {
            rain_ = other.rain_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureRainIsMutable();
            rain_.addAll(other.rain_);
          }
          onChanged();
        }
        if (!other.surfacePressure_.isEmpty()) {
          if (surfacePressure_.isEmpty()) {
            surfacePressure_ = other.surfacePressure_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureSurfacePressureIsMutable();
            surfacePressure_.addAll(other.surfacePressure_);
          }
          onChanged();
        }
        if (!other.windSpeed_.isEmpty()) {
          if (windSpeed_.isEmpty()) {
            windSpeed_ = other.windSpeed_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureWindSpeedIsMutable();
            windSpeed_.addAll(other.windSpeed_);
          }
          onChanged();
        }
        if (!other.windDirection_.isEmpty()) {
          if (windDirection_.isEmpty()) {
            windDirection_ = other.windDirection_;
            bitField0_ = (bitField0_ & ~0x00000100);
          } else {
            ensureWindDirectionIsMutable();
            windDirection_.addAll(other.windDirection_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 9: {
                latitude_ = input.readDouble();

                break;
              } // case 9
              case 17: {
                longitude_ = input.readDouble();

                break;
              } // case 17
              case 26: {
                timezone_ = input.readStringRequireUtf8();

                break;
              } // case 26
              case 34: {
                zipCode_ = input.readStringRequireUtf8();

                break;
              } // case 34
              case 42: {
                region_ = input.readStringRequireUtf8();

                break;
              } // case 42
              case 50: {
                java.lang.String s = input.readStringRequireUtf8();
                ensureTimeIsMutable();
                time_.add(s);
                break;
              } // case 50
              case 57: {
                double v = input.readDouble();
                ensureTemperatureIsMutable();
                temperature_.addDouble(v);
                break;
              } // case 57
              case 58: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureTemperatureIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  temperature_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 58
              case 64: {
                int v = input.readInt32();
                ensureRelativeHumidityIsMutable();
                relativeHumidity_.addInt(v);
                break;
              } // case 64
              case 66: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureRelativeHumidityIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  relativeHumidity_.addInt(input.readInt32());
                }
                input.popLimit(limit);
                break;
              } // case 66
              case 72: {
                int v = input.readInt32();
                ensurePrecipitationProbabilityIsMutable();
                precipitationProbability_.addInt(v);
                break;
              } // case 72
              case 74: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensurePrecipitationProbabilityIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  precipitationProbability_.addInt(input.readInt32());
                }
                input.popLimit(limit);
                break;
              } // case 74
              case 81: {
                double v = input.readDouble();
                ensurePrecipitationIsMutable();
                precipitation_.addDouble(v);
                break;
              } // case 81
              case 82: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensurePrecipitationIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  precipitation_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 82
              case 89: {
                double v = input.readDouble();
                ensureRainIsMutable();
                rain_.addDouble(v);
                break;
              } // case 89
              case 90: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureRainIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  rain_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 90
              case 97: {
                double v = input.readDouble();
                ensureSurfacePressureIsMutable();
                surfacePressure_.addDouble(v);
                break;
              } // case 97
              case 98: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureSurfacePressureIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  surfacePressure_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 98
              case 105: {
                double v = input.readDouble();
                ensureWindSpeedIsMutable();
                windSpeed_.addDouble(v);
                break;
              } // case 105
              case 106: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureWindSpeedIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  windSpeed_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 106
              case 112: {
                int v = input.readInt32();
                ensureWindDirectionIsMutable();
                windDirection_.addInt(v);
                break;
              } // case 112
              case 114: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureWindDirectionIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  windDirection_.addInt(input.readInt32());
                }
                input.popLimit(limit);
                break;
              } // case 114
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private double latitude_ ;
      /**
       * <code>double latitude = 1;</code>
       * @return The latitude.
       */
      @java.lang.Override
      public double getLatitude() {
        return latitude_;
      }
      /**
       * <code>double latitude = 1;</code>
       * @param value The latitude to set.
       * @return This builder for chaining.
       */
      public Builder setLatitude(double value) {
        
        latitude_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>double latitude = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearLatitude() {
        
        latitude_ = 0D;
        onChanged();
        return this;
      }

      private double longitude_ ;
      /**
       * <code>double longitude = 2;</code>
       * @return The longitude.
       */
      @java.lang.Override
      public double getLongitude() {
        return longitude_;
      }
      /**
       * <code>double longitude = 2;</code>
       * @param value The longitude to set.
       * @return This builder for chaining.
       */
      public Builder setLongitude(double value) {
        
        longitude_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>double longitude = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearLongitude() {
        
        longitude_ = 0D;
        onChanged();
        return this;
      }

      private java.lang.Object timezone_ = "";
      /**
       * <code>string timezone = 3;</code>
       * @return The timezone.
       */
      public java.lang.String getTimezone() {
        java.lang.Object ref = timezone_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          timezone_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string timezone = 3;</code>
       * @return The bytes for timezone.
       */
      public com.google.protobuf.ByteString
          getTimezoneBytes() {
        java.lang.Object ref = timezone_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          timezone_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string timezone = 3;</code>
       * @param value The timezone to set.
       * @return This builder for chaining.
       */
      public Builder setTimezone(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        timezone_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string timezone = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearTimezone() {
        
        timezone_ = getDefaultInstance().getTimezone();
        onChanged();
        return this;
      }
      /**
       * <code>string timezone = 3;</code>
       * @param value The bytes for timezone to set.
       * @return This builder for chaining.
       */
      public Builder setTimezoneBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        timezone_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object zipCode_ = "";
      /**
       * <code>string zipCode = 4;</code>
       * @return The zipCode.
       */
      public java.lang.String getZipCode() {
        java.lang.Object ref = zipCode_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          zipCode_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string zipCode = 4;</code>
       * @return The bytes for zipCode.
       */
      public com.google.protobuf.ByteString
          getZipCodeBytes() {
        java.lang.Object ref = zipCode_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          zipCode_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string zipCode = 4;</code>
       * @param value The zipCode to set.
       * @return This builder for chaining.
       */
      public Builder setZipCode(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        zipCode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string zipCode = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearZipCode() {
        
        zipCode_ = getDefaultInstance().getZipCode();
        onChanged();
        return this;
      }
      /**
       * <code>string zipCode = 4;</code>
       * @param value The bytes for zipCode to set.
       * @return This builder for chaining.
       */
      public Builder setZipCodeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        zipCode_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object region_ = "";
      /**
       * <code>string region = 5;</code>
       * @return The region.
       */
      public java.lang.String getRegion() {
        java.lang.Object ref = region_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          region_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string region = 5;</code>
       * @return The bytes for region.
       */
      public com.google.protobuf.ByteString
          getRegionBytes() {
        java.lang.Object ref = region_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          region_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string region = 5;</code>
       * @param value The region to set.
       * @return This builder for chaining.
       */
      public Builder setRegion(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        region_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string region = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearRegion() {
        
        region_ = getDefaultInstance().getRegion();
        onChanged();
        return this;
      }
      /**
       * <code>string region = 5;</code>
       * @param value The bytes for region to set.
       * @return This builder for chaining.
       */
      public Builder setRegionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        region_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList time_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureTimeIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          time_ = new com.google.protobuf.LazyStringArrayList(time_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated string time = 6;</code>
       * @return A list containing the time.
       */
      public com.google.protobuf.ProtocolStringList
          getTimeList() {
        return time_.getUnmodifiableView();
      }
      /**
       * <code>repeated string time = 6;</code>
       * @return The count of time.
       */
      public int getTimeCount() {
        return time_.size();
      }
      /**
       * <code>repeated string time = 6;</code>
       * @param index The index of the element to return.
       * @return The time at the given index.
       */
      public java.lang.String getTime(int index) {
        return time_.get(index);
      }
      /**
       * <code>repeated string time = 6;</code>
       * @param index The index of the value to return.
       * @return The bytes of the time at the given index.
       */
      public com.google.protobuf.ByteString
          getTimeBytes(int index) {
        return time_.getByteString(index);
      }
      /**
       * <code>repeated string time = 6;</code>
       * @param index The index to set the value at.
       * @param value The time to set.
       * @return This builder for chaining.
       */
      public Builder setTime(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureTimeIsMutable();
        time_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string time = 6;</code>
       * @param value The time to add.
       * @return This builder for chaining.
       */
      public Builder addTime(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureTimeIsMutable();
        time_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string time = 6;</code>
       * @param values The time to add.
       * @return This builder for chaining.
       */
      public Builder addAllTime(
          java.lang.Iterable<java.lang.String> values) {
        ensureTimeIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, time_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string time = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearTime() {
        time_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string time = 6;</code>
       * @param value The bytes of the time to add.
       * @return This builder for chaining.
       */
      public Builder addTimeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        ensureTimeIsMutable();
        time_.add(value);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList temperature_ = emptyDoubleList();
      private void ensureTemperatureIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          temperature_ = mutableCopy(temperature_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated double temperature = 7;</code>
       * @return A list containing the temperature.
       */
      public java.util.List<java.lang.Double>
          getTemperatureList() {
        return ((bitField0_ & 0x00000002) != 0) ?
                 java.util.Collections.unmodifiableList(temperature_) : temperature_;
      }
      /**
       * <code>repeated double temperature = 7;</code>
       * @return The count of temperature.
       */
      public int getTemperatureCount() {
        return temperature_.size();
      }
      /**
       * <code>repeated double temperature = 7;</code>
       * @param index The index of the element to return.
       * @return The temperature at the given index.
       */
      public double getTemperature(int index) {
        return temperature_.getDouble(index);
      }
      /**
       * <code>repeated double temperature = 7;</code>
       * @param index The index to set the value at.
       * @param value The temperature to set.
       * @return This builder for chaining.
       */
      public Builder setTemperature(
          int index, double value) {
        ensureTemperatureIsMutable();
        temperature_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double temperature = 7;</code>
       * @param value The temperature to add.
       * @return This builder for chaining.
       */
      public Builder addTemperature(double value) {
        ensureTemperatureIsMutable();
        temperature_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double temperature = 7;</code>
       * @param values The temperature to add.
       * @return This builder for chaining.
       */
      public Builder addAllTemperature(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureTemperatureIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, temperature_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double temperature = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearTemperature() {
        temperature_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.IntList relativeHumidity_ = emptyIntList();
      private void ensureRelativeHumidityIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          relativeHumidity_ = mutableCopy(relativeHumidity_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated int32 relativeHumidity = 8;</code>
       * @return A list containing the relativeHumidity.
       */
      public java.util.List<java.lang.Integer>
          getRelativeHumidityList() {
        return ((bitField0_ & 0x00000004) != 0) ?
                 java.util.Collections.unmodifiableList(relativeHumidity_) : relativeHumidity_;
      }
      /**
       * <code>repeated int32 relativeHumidity = 8;</code>
       * @return The count of relativeHumidity.
       */
      public int getRelativeHumidityCount() {
        return relativeHumidity_.size();
      }
      /**
       * <code>repeated int32 relativeHumidity = 8;</code>
       * @param index The index of the element to return.
       * @return The relativeHumidity at the given index.
       */
      public int getRelativeHumidity(int index) {
        return relativeHumidity_.getInt(index);
      }
      /**
       * <code>repeated int32 relativeHumidity = 8;</code>
       * @param index The index to set the value at.
       * @param value The relativeHumidity to set.
       * @return This builder for chaining.
       */
      public Builder setRelativeHumidity(
          int index, int value) {
        ensureRelativeHumidityIsMutable();
        relativeHumidity_.setInt(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 relativeHumidity = 8;</code>
       * @param value The relativeHumidity to add.
       * @return This builder for chaining.
       */
      public Builder addRelativeHumidity(int value) {
        ensureRelativeHumidityIsMutable();
        relativeHumidity_.addInt(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 relativeHumidity = 8;</code>
       * @param values The relativeHumidity to add.
       * @return This builder for chaining.
       */
      public Builder addAllRelativeHumidity(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureRelativeHumidityIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, relativeHumidity_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 relativeHumidity = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearRelativeHumidity() {
        relativeHumidity_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.IntList precipitationProbability_ = emptyIntList();
      private void ensurePrecipitationProbabilityIsMutable() {
        if (!((bitField0_ & 0x00000008) != 0)) {
          precipitationProbability_ = mutableCopy(precipitationProbability_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int32 precipitationProbability = 9;</code>
       * @return A list containing the precipitationProbability.
       */
      public java.util.List<java.lang.Integer>
          getPrecipitationProbabilityList() {
        return ((bitField0_ & 0x00000008) != 0) ?
                 java.util.Collections.unmodifiableList(precipitationProbability_) : precipitationProbability_;
      }
      /**
       * <code>repeated int32 precipitationProbability = 9;</code>
       * @return The count of precipitationProbability.
       */
      public int getPrecipitationProbabilityCount() {
        return precipitationProbability_.size();
      }
      /**
       * <code>repeated int32 precipitationProbability = 9;</code>
       * @param index The index of the element to return.
       * @return The precipitationProbability at the given index.
       */
      public int getPrecipitationProbability(int index) {
        return precipitationProbability_.getInt(index);
      }
      /**
       * <code>repeated int32 precipitationProbability = 9;</code>
       * @param index The index to set the value at.
       * @param value The precipitationProbability to set.
       * @return This builder for chaining.
       */
      public Builder setPrecipitationProbability(
          int index, int value) {
        ensurePrecipitationProbabilityIsMutable();
        precipitationProbability_.setInt(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 precipitationProbability = 9;</code>
       * @param value The precipitationProbability to add.
       * @return This builder for chaining.
       */
      public Builder addPrecipitationProbability(int value) {
        ensurePrecipitationProbabilityIsMutable();
        precipitationProbability_.addInt(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 precipitationProbability = 9;</code>
       * @param values The precipitationProbability to add.
       * @return This builder for chaining.
       */
      public Builder addAllPrecipitationProbability(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePrecipitationProbabilityIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, precipitationProbability_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 precipitationProbability = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearPrecipitationProbability() {
        precipitationProbability_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList precipitation_ = emptyDoubleList();
      private void ensurePrecipitationIsMutable() {
        if (!((bitField0_ & 0x00000010) != 0)) {
          precipitation_ = mutableCopy(precipitation_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <code>repeated double precipitation = 10;</code>
       * @return A list containing the precipitation.
       */
      public java.util.List<java.lang.Double>
          getPrecipitationList() {
        return ((bitField0_ & 0x00000010) != 0) ?
                 java.util.Collections.unmodifiableList(precipitation_) : precipitation_;
      }
      /**
       * <code>repeated double precipitation = 10;</code>
       * @return The count of precipitation.
       */
      public int getPrecipitationCount() {
        return precipitation_.size();
      }
      /**
       * <code>repeated double precipitation = 10;</code>
       * @param index The index of the element to return.
       * @return The precipitation at the given index.
       */
      public double getPrecipitation(int index) {
        return precipitation_.getDouble(index);
      }
      /**
       * <code>repeated double precipitation = 10;</code>
       * @param index The index to set the value at.
       * @param value The precipitation to set.
       * @return This builder for chaining.
       */
      public Builder setPrecipitation(
          int index, double value) {
        ensurePrecipitationIsMutable();
        precipitation_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double precipitation = 10;</code>
       * @param value The precipitation to add.
       * @return This builder for chaining.
       */
      public Builder addPrecipitation(double value) {
        ensurePrecipitationIsMutable();
        precipitation_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double precipitation = 10;</code>
       * @param values The precipitation to add.
       * @return This builder for chaining.
       */
      public Builder addAllPrecipitation(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensurePrecipitationIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, precipitation_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double precipitation = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearPrecipitation() {
        precipitation_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList rain_ = emptyDoubleList();
      private void ensureRainIsMutable() {
        if (!((bitField0_ & 0x00000020) != 0)) {
          rain_ = mutableCopy(rain_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated double rain = 11;</code>
       * @return A list containing the rain.
       */
      public java.util.List<java.lang.Double>
          getRainList() {
        return ((bitField0_ & 0x00000020) != 0) ?
                 java.util.Collections.unmodifiableList(rain_) : rain_;
      }
      /**
       * <code>repeated double rain = 11;</code>
       * @return The count of rain.
       */
      public int getRainCount() {
        return rain_.size();
      }
      /**
       * <code>repeated double rain = 11;</code>
       * @param index The index of the element to return.
       * @return The rain at the given index.
       */
      public double getRain(int index) {
        return rain_.getDouble(index);
      }
      /**
       * <code>repeated double rain = 11;</code>
       * @param index The index to set the value at.
       * @param value The rain to set.
       * @return This builder for chaining.
       */
      public Builder setRain(
          int index, double value) {
        ensureRainIsMutable();
        rain_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double rain = 11;</code>
       * @param value The rain to add.
       * @return This builder for chaining.
       */
      public Builder addRain(double value) {
        ensureRainIsMutable();
        rain_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double rain = 11;</code>
       * @param values The rain to add.
       * @return This builder for chaining.
       */
      public Builder addAllRain(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureRainIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, rain_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double rain = 11;</code>
       * @return This builder for chaining.
       */
      public Builder clearRain() {
        rain_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList surfacePressure_ = emptyDoubleList();
      private void ensureSurfacePressureIsMutable() {
        if (!((bitField0_ & 0x00000040) != 0)) {
          surfacePressure_ = mutableCopy(surfacePressure_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated double surfacePressure = 12;</code>
       * @return A list containing the surfacePressure.
       */
      public java.util.List<java.lang.Double>
          getSurfacePressureList() {
        return ((bitField0_ & 0x00000040) != 0) ?
                 java.util.Collections.unmodifiableList(surfacePressure_) : surfacePressure_;
      }
      /**
       * <code>repeated double surfacePressure = 12;</code>
       * @return The count of surfacePressure.
       */
      public int getSurfacePressureCount() {
        return surfacePressure_.size();
      }
      /**
       * <code>repeated double surfacePressure = 12;</code>
       * @param index The index of the element to return.
       * @return The surfacePressure at the given index.
       */
      public double getSurfacePressure(int index) {
        return surfacePressure_.getDouble(index);
      }
      /**
       * <code>repeated double surfacePressure = 12;</code>
       * @param index The index to set the value at.
       * @param value The surfacePressure to set.
       * @return This builder for chaining.
       */
      public Builder setSurfacePressure(
          int index, double value) {
        ensureSurfacePressureIsMutable();
        surfacePressure_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double surfacePressure = 12;</code>
       * @param value The surfacePressure to add.
       * @return This builder for chaining.
       */
      public Builder addSurfacePressure(double value) {
        ensureSurfacePressureIsMutable();
        surfacePressure_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double surfacePressure = 12;</code>
       * @param values The surfacePressure to add.
       * @return This builder for chaining.
       */
      public Builder addAllSurfacePressure(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureSurfacePressureIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, surfacePressure_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double surfacePressure = 12;</code>
       * @return This builder for chaining.
       */
      public Builder clearSurfacePressure() {
        surfacePressure_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList windSpeed_ = emptyDoubleList();
      private void ensureWindSpeedIsMutable() {
        if (!((bitField0_ & 0x00000080) != 0)) {
          windSpeed_ = mutableCopy(windSpeed_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <code>repeated double windSpeed = 13;</code>
       * @return A list containing the windSpeed.
       */
      public java.util.List<java.lang.Double>
          getWindSpeedList() {
        return ((bitField0_ & 0x00000080) != 0) ?
                 java.util.Collections.unmodifiableList(windSpeed_) : windSpeed_;
      }
      /**
       * <code>repeated double windSpeed = 13;</code>
       * @return The count of windSpeed.
       */
      public int getWindSpeedCount() {
        return windSpeed_.size();
      }
      /**
       * <code>repeated double windSpeed = 13;</code>
       * @param index The index of the element to return.
       * @return The windSpeed at the given index.
       */
      public double getWindSpeed(int index) {
        return windSpeed_.getDouble(index);
      }
      /**
       * <code>repeated double windSpeed = 13;</code>
       * @param index The index to set the value at.
       * @param value The windSpeed to set.
       * @return This builder for chaining.
       */
      public Builder setWindSpeed(
          int index, double value) {
        ensureWindSpeedIsMutable();
        windSpeed_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double windSpeed = 13;</code>
       * @param value The windSpeed to add.
       * @return This builder for chaining.
       */
      public Builder addWindSpeed(double value) {
        ensureWindSpeedIsMutable();
        windSpeed_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double windSpeed = 13;</code>
       * @param values The windSpeed to add.
       * @return This builder for chaining.
       */
      public Builder addAllWindSpeed(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureWindSpeedIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, windSpeed_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double windSpeed = 13;</code>
       * @return This builder for chaining.
       */
      public Builder clearWindSpeed() {
        windSpeed_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.IntList windDirection_ = emptyIntList();
      private void ensureWindDirectionIsMutable() {
        if (!((bitField0_ & 0x00000100) != 0)) {
          windDirection_ = mutableCopy(windDirection_);
          bitField0_ |= 0x00000100;
         }
      }
      /**
       * <code>repeated int32 windDirection = 14;</code>
       * @return A list containing the windDirection.
       */
      public java.util.List<java.lang.Integer>
          getWindDirectionList() {
        return ((bitField0_ & 0x00000100) != 0) ?
                 java.util.Collections.unmodifiableList(windDirection_) : windDirection_;
      }
      /**
       * <code>repeated int32 windDirection = 14;</code>
       * @return The count of windDirection.
       */
      public int getWindDirectionCount() {
        return windDirection_.size();
      }
      /**
       * <code>repeated int32 windDirection = 14;</code>
       * @param index The index of the element to return.
       * @return The windDirection at the given index.
       */
      public int getWindDirection(int index) {
        return windDirection_.getInt(index);
      }
      /**
       * <code>repeated int32 windDirection = 14;</code>
       * @param index The index to set the value at.
       * @param value The windDirection to set.
       * @return This builder for chaining.
       */
      public Builder setWindDirection(
          int index, int value) {
        ensureWindDirectionIsMutable();
        windDirection_.setInt(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 windDirection = 14;</code>
       * @param value The windDirection to add.
       * @return This builder for chaining.
       */
      public Builder addWindDirection(int value) {
        ensureWindDirectionIsMutable();
        windDirection_.addInt(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 windDirection = 14;</code>
       * @param values The windDirection to add.
       * @return This builder for chaining.
       */
      public Builder addAllWindDirection(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureWindDirectionIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, windDirection_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 windDirection = 14;</code>
       * @return This builder for chaining.
       */
      public Builder clearWindDirection() {
        windDirection_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000100);
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.example.protobuf.WeatherShema)
    }

    // @@protoc_insertion_point(class_scope:org.example.protobuf.WeatherShema)
    private static final org.example.protobuf.WeatherShemaOuterClass.WeatherShema DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.example.protobuf.WeatherShemaOuterClass.WeatherShema();
    }

    public static org.example.protobuf.WeatherShemaOuterClass.WeatherShema getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<WeatherShema>
        PARSER = new com.google.protobuf.AbstractParser<WeatherShema>() {
      @java.lang.Override
      public WeatherShema parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<WeatherShema> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<WeatherShema> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.example.protobuf.WeatherShemaOuterClass.WeatherShema getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_example_protobuf_WeatherShema_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_example_protobuf_WeatherShema_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\022weatherShema.proto\022\024org.example.protob" +
      "uf\"\255\002\n\014WeatherShema\022\020\n\010latitude\030\001 \001(\001\022\021\n" +
      "\tlongitude\030\002 \001(\001\022\020\n\010timezone\030\003 \001(\t\022\017\n\007zi" +
      "pCode\030\004 \001(\t\022\016\n\006region\030\005 \001(\t\022\014\n\004time\030\006 \003(" +
      "\t\022\023\n\013temperature\030\007 \003(\001\022\030\n\020relativeHumidi" +
      "ty\030\010 \003(\005\022 \n\030precipitationProbability\030\t \003" +
      "(\005\022\025\n\rprecipitation\030\n \003(\001\022\014\n\004rain\030\013 \003(\001\022" +
      "\027\n\017surfacePressure\030\014 \003(\001\022\021\n\twindSpeed\030\r " +
      "\003(\001\022\025\n\rwindDirection\030\016 \003(\005b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_org_example_protobuf_WeatherShema_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_org_example_protobuf_WeatherShema_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_example_protobuf_WeatherShema_descriptor,
        new java.lang.String[] { "Latitude", "Longitude", "Timezone", "ZipCode", "Region", "Time", "Temperature", "RelativeHumidity", "PrecipitationProbability", "Precipitation", "Rain", "SurfacePressure", "WindSpeed", "WindDirection", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
